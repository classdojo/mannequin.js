// Generated by CoffeeScript 1.4.0
(function() {
  var Bindable, Transformer,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Transformer = require("./transformer");

  Bindable = require("bindable");

  module.exports = (function(_super) {

    __extends(_Class, _super);

    /*
    */


    function _Class(model) {
      this.model = model;
      _Class.__super__.constructor.call(this);
    }

    /*
    */


    _Class.prototype.set = function(key, value) {
      var n, target;
      target = {
        key: key,
        currentValue: value
      };
      n = this.emit(key, target);
      return target.currentValue;
    };

    /*
    */


    _Class.prototype.use = function(key, transformer) {
      var event, keyParts,
        _this = this;
      if (arguments.length === 1) {
        transformer = key;
        key = void 0;
      }
      if (!key) {
        event = "**";
      } else {
        keyParts = key.split(".");
        event = "" + (keyParts.shift()) + ".**";
      }
      transformer = new Transformer(this, key, transformer);
      this.on(event, function(target) {
        if (target.key !== key) {
          return;
        }
        if (!key || (_this.model.get(key) !== target.currentValue)) {
          return target.currentValue = transformer.set(target.currentValue);
        }
      });
      return transformer;
    };

    return _Class;

  })(Bindable.EventEmitter);

}).call(this);
