// Generated by CoffeeScript 1.6.2
(function() {
  var Dictionary, EventEmitter, ModelBuilder, Schema, utils,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  utils = require("./utils");

  Schema = require("./schema");

  ModelBuilder = require("./modelBuilder");

  EventEmitter = require("events").EventEmitter;

  /*
   ties together schemas & models. It also allows business logic.
  */


  module["export"] = Dictionary = (function(_super) {
    __extends(Dictionary, _super);

    /*
    */


    function Dictionary() {
      this._schemas = {};
      this._modelBuilders = {};
    }

    /*
    */


    Dictionary.prototype.register = function(name, schema) {
      this._schemas[name] = schema = utils.isSchema(schema) ? schema.clone() : new Schema(schema);
      schema.dictionary(this);
      return schema.modelBuilder = this.modelBuilder(name);
    };

    /*
    */


    Dictionary.prototype.getSchema = function(name) {
      return this._schemas[name];
    };

    /*
    */


    Dictionary.prototype.modelBuilder = function(name) {
      var modelBuilder;

      if (this._modelBuilders[name]) {
        return this._modelBuilders[name];
      }
      this.emit("modelBuilder", this._modelBuilders[name] = modelBuilder = new ModelBuilder(this, name, this.getSchema(name)));
      return modelBuilder;
    };

    return Dictionary;

  })(EventEmitter);

  module.exports = function() {
    return new Dictionary();
  };

}).call(this);
