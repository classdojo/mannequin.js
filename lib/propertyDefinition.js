// Generated by CoffeeScript 1.6.2
(function() {
  var PropertyDefinition, async, dref, isa, toarray, utils, verify;

  dref = require("dref");

  utils = require("./utils");

  verify = require("verify")();

  async = require("async");

  toarray = require("toarray");

  isa = require("isa");

  /*
  */


  PropertyDefinition = (function() {
    /*
    */
    function PropertyDefinition(schema, key, options) {
      var keyParts;

      this.schema = schema;
      keyParts = key.split(" ");
      this.key = keyParts.pop();
      this.scope = keyParts.pop() || "private";
      this.options = this._fixDefnition(options);
      this._validateDefinition();
      this._createValidators();
    }

    /*
    */


    PropertyDefinition.prototype.test = function(target, callback) {
      var originalValue, testV, v,
        _this = this;

      originalValue = dref.get(target, this.key);
      v = testV = originalValue != null ? originalValue : this._default();
      if (testV && testV.source) {
        testV = testV.source();
      }
      if ((testV === void 0 || testV === null) || (typeof testV === "string" && !testV.length) && this.options.$required) {
        return callback(new Error("\"" + this.key + "\" must be present"));
      }
      return async.forEach(this._testers, (function(tester, next) {
        return tester(testV, next);
      }), function(err) {
        if (err) {
          return callback(new Error(_this.options.message || ("\"" + _this.key + "\" is invalid")));
        }
        if (v !== originalValue) {
          dref.set(target, _this.key, v);
        }
        return callback();
      });
    };

    /*
    */


    PropertyDefinition.prototype.schemaRef = function() {
      if (!this.options.$ref) {
        return null;
      }
      return this.schema.dictionary().getSchema(this.options.$ref);
    };

    /*
    */


    PropertyDefinition.prototype._fixDefnition = function(definition) {
      var def;

      if (typeof definition === "string" && utils.firstKey(definition).substr(0, 1) !== "$") {
        return {
          $type: definition
        };
      } else if (isa.array(definition)) {
        def = this._fixDefnition(definition[0]);
        def.$multi = true;
        def.$default = function() {
          return [];
        };
        return def;
      } else {
        return definition;
      }
    };

    /*
    */


    PropertyDefinition.prototype._validateDefinition = function() {
      if (!this.options.$type && !this.options.$ref) {
        throw new Error("definition type must exist for " + this.key);
      }
    };

    /*
    */


    PropertyDefinition.prototype._createValidators = function() {
      var testers,
        _this = this;

      testers = [];
      if (this.options.$ref) {
        testers.push(this._multi(function(item, next) {
          return _this.schemaRef().test(item, next);
        }));
      } else {

      }
      if (this.options.$type) {
        testers.push(this._multi(this._generateTypeTester()));
      }
      return this._testers = testers;
    };

    /*
    */


    PropertyDefinition.prototype._generateTypeTester = function() {
      var k, key, tester;

      if (this.options.$test) {
        return this.options.$test;
      }
      tester = verify.tester().is(this.options.$type);
      for (key in this.options) {
        k = key.substr(1);
        if (!!tester[k]) {
          tester[k].apply(tester, toarray(this.options[key]));
        }
      }
      return tester;
    };

    /*
    */


    PropertyDefinition.prototype._multi = function(tester) {
      tester = this._tester(tester);
      return function(value, next) {
        return async.forEach(toarray(value), (function(value, next) {
          return tester(value, next);
        }), next);
      };
    };

    /*
    */


    PropertyDefinition.prototype._default = function() {
      if (!this.options.$default) {
        return this.options.$default;
      }
      if (typeof this.options.$default === "function") {
        return this.options.$default();
      }
      return this.options.$default;
    };

    /*
    */


    PropertyDefinition.prototype._getSchema = function(value) {
      var _ref;

      return (_ref = this.schema.dictionary()) != null ? _ref.getSchema(value) : void 0;
    };

    /*
    */


    PropertyDefinition.prototype._tester = function(target) {
      var context, test;

      context = this;
      test = null;
      if (typeof target === "function") {
        test = target;
      } else if (target.test) {
        test = target.test;
        context = target;
      }
      return function(value, next) {
        if (test.length === 1) {
          return next(!test.call(context, value));
        } else {
          return test.call(context, value, next);
        }
      };
    };

    return PropertyDefinition;

  })();

  /*
  */


  module.exports = PropertyDefinition;

}).call(this);
