// Generated by CoffeeScript 1.6.2
(function() {
  var Model, Transformers, bindable, isa, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require("underscore");

  bindable = require("bindable");

  Transformers = require("./transformers");

  isa = require("isa");

  module.exports = Model = (function(_super) {
    __extends(Model, _super);

    /*
    */


    function Model(data, options) {
      if (data == null) {
        data = {};
      }
      if (options == null) {
        options = {};
      }
      Model.__super__.constructor.call(this, data);
      _.extend(this, options);
      this.init();
    }

    /*
    */


    Model.prototype.init = function() {
      var def, _i, _len, _ref, _results,
        _this = this;

      _ref = this.schema.refs();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        def = _ref[_i];
        _results.push((function(def) {
          var refClass, transformer;

          refClass = _this.dictionary.modelBuilder(def.options.$ref).getClass();
          transformer = _this.transform(def.key);
          if (def.options.$multi) {
            transformer.map(function(source) {
              var col;

              col = _this._createCollection(def);
              col.parent = _this;
              col.transform().cast(refClass).map(function(item) {
                item.parent = col;
                return item;
              });
              return col.reset(source);
            });
            _this._set(def.key, _this.get(def.key) || []);
          } else {
            transformer.cast(refClass);
          }
          return transformer.reset();
        })(def));
      }
      return _results;
    };

    /*
    */


    Model.prototype.transform = function(key, transformer) {
      return transformer = this._transformer().use(key, transformer);
    };

    /*
    */


    Model.prototype.validate = function(callback) {
      if (!this.schema) {
        return callback();
      }
      return this.schema.test(this, callback);
    };

    /*
    */


    Model.prototype.get = function(key) {
      if (arguments.length === 0) {
        return Model.__super__.get.call(this, key);
      }
      if (this._virtual[key]) {
        return this._virtual[key].call(this);
      }
      return Model.__super__.get.call(this, key);
    };

    /*
    */


    Model.prototype._set = function(key, value) {
      if (this._virtual[key]) {
        return this._virtual[key].call(this, value);
      }
      return Model.__super__._set.call(this, key, this._transform(key, value));
    };

    /*
    */


    Model.prototype._transform = function(key, value) {
      if (!this.__transformer) {
        return value;
      }
      return this.__transformer.set(key, value);
    };

    /*
    */


    Model.prototype._transformer = function() {
      return this.__transformer || (this.__transformer = new Transformers(this));
    };

    /*
    */


    Model.prototype._createCollection = function(definition) {
      return this.builder.createCollection(this, definition);
    };

    return Model;

  })(bindable.Object);

}).call(this);
