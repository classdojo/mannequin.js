// Generated by CoffeeScript 1.4.0
(function() {
  var Model, ModelBuilder, Virtual, async, step, toarray, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ = require("underscore");

  toarray = require("toarray");

  async = require("async");

  step = require("stepc");

  Model = require("./model");

  Virtual = (function() {
    /*
    */

    Virtual.prototype.__isVirtual = true;

    /*
    */


    function Virtual(key) {
      this.call = __bind(this.call, this);
      this.get(function() {
        return this[key];
      });
      this.set(function(value) {
        return this[key] = value;
      });
    }

    /*
    */


    Virtual.prototype.call = function(context, value) {
      if (arguments.length === 1) {
        return this._get.call(context);
      } else {
        return this._set.apply(context, value);
      }
      return this;
    };

    /*
    */


    Virtual.prototype.get = function(_get) {
      this._get = _get;
      return this;
    };

    /*
    */


    Virtual.prototype.set = function(_set) {
      this._set = _set;
      return this;
    };

    return Virtual;

  })();

  module.exports = ModelBuilder = (function() {
    /*
    */

    function ModelBuilder(dictionary, name, schema) {
      this.dictionary = dictionary;
      this.name = name;
      this.schema = schema;
    }

    /*
    */


    ModelBuilder.prototype.pre = function(keys, callback) {
      return this._registerPrePost("pre", keys, callback);
    };

    /*
    */


    ModelBuilder.prototype.post = function(key, callback) {
      return this._registerPrePost("post", keys, callback);
    };

    /*
       registers static vars
    */


    ModelBuilder.prototype["static"] = function(key, callback) {
      var k;
      if (arguments.length === 1) {
        for (k in key) {
          this["static"](k, key[k]);
          return;
        }
      }
      return this.getClass()[key] = callback;
    };

    /*
       virtual methods for getters
    */


    ModelBuilder.prototype.virtual = function(key) {
      return this.getClass()._virtual[key] || (this.getClass()._virtual[key] = new Virtual(key));
    };

    /*
    */


    ModelBuilder.prototype.getClass = function() {
      var clazz;
      if (this._class) {
        return this._class;
      }
      clazz = this._class = function() {
        return clazz.__super__.constructor.apply(this, arguments);
      };
      this._class.prototype = _.extend({}, Model.prototype);
      this._class.prototype.schema = this.schema;
      this._class.prototype.constructor = clazz;
      this._class.__super__ = Model.prototype;
      this._class.prototype.builder = this;
      this._class.prototype.dictionary = this.dictionary;
      this._class.prototype._pre = {};
      this._class.prototype._post = {};
      this._class.prototype._virtual = {};
      return this._class;
    };

    /*
    */


    ModelBuilder.prototype._registerPrePost = function(pp, keys, callback) {
      var key, stack, _i, _len, _ref, _results;
      _ref = toarray(keys);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        _results.push(stack = this._prePost(pp, key).push(callback));
      }
      return _results;
    };

    /*
    */


    ModelBuilder.prototype._prePost = function(pp, key) {
      var original, _ref, _ref1;
      if ((_ref = this._class.prototype[pp]) != null ? _ref[key] : void 0) {
        return (_ref1 = this._class.prototype[pp]) != null ? _ref1[key] : void 0;
      }
      this._class.prototype._pre[key] = [];
      this._class.prototype._post[key] = [];
      original = this._class.prototye[pp];
      this._class.prototype[pp] = function(next) {
        var o, self;
        o = outcome.e(next);
        self = this;
        return step.async((function() {
          return async.eachSeries(self._pre, (function(fn, next) {
            return fn.call(self, next);
          }), this);
        }), o.s(function() {
          if (!original) {
            return this();
          }
          return original.call(this);
        }), o.s(function() {
          return async.eachSeries(self._post, (function(fn, next) {
            return fn.call(self, next);
          }), this);
        }), next);
      };
      return this._prePost(pp, key);
    };

    return ModelBuilder;

  })();

}).call(this);
