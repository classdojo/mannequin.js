// Generated by CoffeeScript 1.6.2
(function() {
  var EventEmitter, Model, ModelBuilder, Virtual, async, bindable, outcome, step, toarray, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require("underscore");

  toarray = require("toarray");

  async = require("async");

  step = require("stepc");

  Model = require("./model");

  bindable = require("bindable");

  outcome = require("outcome");

  EventEmitter = require("events").EventEmitter;

  Virtual = (function() {
    /*
    */
    Virtual.prototype.__isVirtual = true;

    /*
    */


    function Virtual(key) {
      this.call = __bind(this.call, this);      this.get(function() {
        return this[key];
      });
      this.set(function(value) {
        return this[key] = value;
      });
    }

    /*
    */


    Virtual.prototype.call = function(context, value) {
      if (arguments.length === 1) {
        return this._get.call(context);
      } else {
        return this._set.call(context, value);
      }
      return this;
    };

    /*
    */


    Virtual.prototype.get = function(_get) {
      this._get = _get;
      return this;
    };

    /*
    */


    Virtual.prototype.set = function(_set) {
      this._set = _set;
      return this;
    };

    return Virtual;

  })();

  module.exports = ModelBuilder = (function(_super) {
    __extends(ModelBuilder, _super);

    /*
    */


    function ModelBuilder(dictionary, name, schema) {
      this.dictionary = dictionary;
      this.name = name;
      this.schema = schema;
      this._virtuals = {};
      this._pre = {};
      this._post = {};
      this.properties = this.methods = this.getClass().prototype;
      this.statics = this.getClass();
      this._setupMethods();
    }

    /*
    */


    ModelBuilder.prototype.pre = function(keys, callback) {
      return this._registerPrePost(this._pre, keys, callback);
    };

    /*
    */


    ModelBuilder.prototype.post = function(keys, callback) {
      return this._registerPrePost(this._post, keys, callback);
    };

    /*
     registers static vars
    */


    ModelBuilder.prototype["static"] = function(key, callback) {
      var k;

      if (arguments.length === 1) {
        for (k in key) {
          this["static"](k, key[k]);
          return;
        }
      }
      return this.getClass()[key] = callback;
    };

    /*
     virtual methods for getters
    */


    ModelBuilder.prototype.virtual = function(key) {
      return this._virtuals[key] || (this._virtuals[key] = new Virtual(key));
    };

    /*
    */


    ModelBuilder.prototype.initModel = function(model) {
      var def, _i, _len, _ref, _results;

      _ref = this.schema.refs();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        def = _ref[_i];
        _results.push(this._initPropertyTransformation(model, def));
      }
      return _results;
    };

    /*
    */


    ModelBuilder.prototype._initPropertyTransformation = function(model, def) {
      var transformer;

      transformer = model.transform(def.key);
      this.emit("transformModelProperty", model, def);
      if (def.options.$multi) {
        this._initCollectionTransformation(model, transformer, def);
      } else {
        this._initModelTransformation(model, transformer, def);
      }
      return transformer.reset();
    };

    /*
    */


    ModelBuilder.prototype._initCollectionTransformation = function(model, transformer, def) {
      var refClass,
        _this = this;

      refClass = this.dictionary.modelBuilder(def.options.$ref).getClass();
      transformer.map(function(source) {
        var col;

        col = _this.createCollection(model, def);
        col.parent = model;
        col.transform().cast(refClass).map(function(item) {
          item.parent = col;
          item.definition = def;
          return item;
        });
        return col.reset(source);
      });
      if (!model.get(def.key)) {
        return model._set(def.key, []);
      }
    };

    /*
    */


    ModelBuilder.prototype._initModelTransformation = function(model, transformer, def) {
      var refClass;

      refClass = this.dictionary.modelBuilder(def.options.$ref).getClass();
      return transformer.cast(refClass).map(function(model) {
        model.ownerDefinition = def;
        return model;
      });
    };

    /*
    */


    ModelBuilder.prototype.createCollection = function(item) {
      return new bindable.Collection();
    };

    /*
    */


    ModelBuilder.prototype.getClass = function() {
      var clazz;

      if (this._class) {
        return this._class;
      }
      clazz = this._class = function() {
        return clazz.__super__.constructor.apply(this, arguments);
      };
      this._class.prototype = _.extend({}, Model.prototype);
      this._class.prototype.schema = this.schema;
      this._class.prototype.constructor = clazz;
      this._class.__super__ = Model.prototype;
      this._class.prototype.builder = this;
      this._class.prototype.dictionary = this.dictionary;
      this._class.prototype._pre = this._pre;
      this._class.prototype._post = this._post;
      this._class.prototype._virtual = this._virtuals;
      this._class.builder = this;
      return this._class;
    };

    /*
    */


    ModelBuilder.prototype._registerPrePost = function(pp, keys, callback) {
      var key, _i, _len, _ref;

      _ref = toarray(keys);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        this._prePost(pp, key).push(callback);
      }
      return this;
    };

    /*
    */


    ModelBuilder.prototype._setupMethods = function() {
      var _this = this;

      return this.methods.model = function(name) {
        return _this.dictionary.modelBuilder(name).getClass();
      };
    };

    /*
    */


    ModelBuilder.prototype._prePost = function(pp, key) {
      var original, post, pre;

      if (pp[key]) {
        return pp[key];
      }
      this._pre[key] = [];
      this._post[key] = [];
      original = this._class.prototype[key];
      pre = this._pre[key];
      post = this._post[key];
      this._class.prototype[key] = function(next) {
        var o, self;

        o = outcome.e(next);
        self = this;
        return step.async((function() {
          return async.eachSeries(pre, (function(fn, next) {
            return fn.call(self, next);
          }), this);
        }), o.s(function() {
          if (!original) {
            return this();
          }
          return original.call(self, this);
        }), o.s(function() {
          return async.eachSeries(post, (function(fn, next) {
            return fn.call(self, next);
          }), this);
        }), next);
      };
      return this._prePost(pp, key);
    };

    return ModelBuilder;

  })(EventEmitter);

}).call(this);
