{
  "name": "verify",
  "version": "0.0.4",
  "description": "```javascript",
  "main": "./lib/index.js",
  "directories": {
    "example": "examples"
  },
  "dependencies": {
    "validator": "~0.4.13",
    "structr": "0.2.x",
    "comerr": "0.0.x"
  },
  "devDependencies": {},
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://crcn:KQ3Lc6za@github.com/crcn/verify.js.git"
  },
  "author": "",
  "license": "BSD",
  "readme": "```javascript\n\nvar verify = require(\"verify\")();\n\nverify.register(\"email\", \"Invalid email\").match(/regexp/).len(6, 64);\nverify.register(\"name\", \"Invalid name\").len(2);\nverify.register(\"phoneNumber\", \"Invalid phone number\").sanitize(/\\d+\\-\\d+\\-\\d+/, function(number) {\n\treturn number.replace(/-/g, \"\");\n})\nverify.register(\"fullName\", \"Invalid full name\").is(\"name\");\n\n\n//don't throw an error if validation \nverify.throwsError(false);\n\nvar options = {\n\tphoneNumber: \"994-433-3444\",\n\temail: \"email@email.com\",\n\tfullName: \"Wu\"\n}\n\n\nif(verify.that(options).has(\"email\", \"phoneNumber\", \"fullName\").sanitize()) {\n\tconsole.log(options.phoneNumber); //994443344\n}\n\n```\n\n\n### API\n\n#### verify(options)\n\t\n\t- `throwsError` - TRUE if the validation library throws an error if one occurs\n\n#### chain verify.register(name, message)\n\t\nregisters a new verifiable item\n\n#### chain verify.get(name)\n\nreturns a validator chain that's already registered\n\n### Chain API\n\n#### chain.match(fnOrRegexp)\n\ncheck against a given value\n\n#### chain.sanitize(check, fn)\n\nsanitizes the value based on the check. \n",
  "readmeFilename": "README.md",
  "_id": "verify@0.0.4",
  "_from": "verify@"
}
